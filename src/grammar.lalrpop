use crate::ast::{Expr, Val};

grammar;

pub Prog = Exprs;

pub Expr: Expr = {
    <v:Value> => Expr::Value(v),
    <n:Opname> => Expr::Opname(n.to_owned())
}

pub Value: Val = {
    <Num> => Val::Number(<>),
    <Text> => Val::Text(<>),
    <Block> => Val::Block(<>)
};

pub Num: f64 = r"-?[0-9]*(\.[0-9]+)?" => <>.parse().unwrap();
pub Text: String = r#"('.*')|(".*")"# => <>.trim_matches(&['"', '\'']).to_owned();
pub Block = r"\{"<Exprs>r"\}";

pub Opname = <r"[a-zA-Z_]+">;

pub Exprs: Vec<Expr> = (<Expr>)*;
